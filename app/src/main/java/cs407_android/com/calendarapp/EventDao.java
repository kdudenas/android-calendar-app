package cs407_android.com.calendarapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import cs407_android.com.calendarapp.Event;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EVENT.
*/
public class EventDao extends AbstractDao<Event, Long> {

    public static final String TABLENAME = "EVENT";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Month = new Property(2, Integer.class, "month", false, "MONTH");
        public final static Property DayOfMonth = new Property(3, Integer.class, "dayOfMonth", false, "DAY_OF_MONTH");
        public final static Property StartHour = new Property(4, Integer.class, "startHour", false, "START_HOUR");
        public final static Property StartMinute = new Property(5, java.util.Date.class, "startMinute", false, "START_MINUTE");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property Display = new Property(7, Boolean.class, "display", false, "DISPLAY");
    };


    public EventDao(DaoConfig config) {
        super(config);
    }
    
    public EventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'EVENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'MONTH' INTEGER," + // 2: month
                "'DAY_OF_MONTH' INTEGER," + // 3: dayOfMonth
                "'START_HOUR' INTEGER," + // 4: startHour
                "'START_MINUTE' INTEGER," + // 5: startMinute
                "'DESCRIPTION' TEXT," + // 6: description
                "'DISPLAY' INTEGER);"; // 7: display
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EVENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Event entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        Integer month = entity.getMonth();
        if (month != null) {
            stmt.bindLong(3, month);
        }
 
        Integer dayOfMonth = entity.getDayOfMonth();
        if (dayOfMonth != null) {
            stmt.bindLong(4, dayOfMonth);
        }
 
        Integer startHour = entity.getStartHour();
        if (startHour != null) {
            stmt.bindLong(5, startHour);
        }
 
        Integer startMinute = entity.getStartMinute();
        if (startMinute != null) {
            stmt.bindLong(6, startMinute);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        Boolean display = entity.getDisplay();
        if (display != null) {
            stmt.bindLong(8, display ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Event readEntity(Cursor cursor, int offset) {
        Event entity = new Event( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // month
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // dayOfMonth
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // startHour
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // startMinute
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // display
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Event entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMonth(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDayOfMonth(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setStartHour(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStartMinute(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDisplay(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected Long updateKeyAfterInsert(Event entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Event entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
